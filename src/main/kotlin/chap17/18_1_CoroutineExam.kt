package chap17

/**
 * 코루틴
 * 코루틴(Coroutine)은 1.1 버전에 코틀린에 새로 추가된 기능이다.
 * 해당 서적이 작성된 시점에서는 아직 안정화가 되지 않았기 때문에 코틀린 공식홈페이지에서도 코루틴은 실험적이라 1.2 버전 릴리즈 때
 * API가 변경될 가능성이 있다고 명시되어 있었다고 한다.
 *
 * 코루틴을 사용하면 메인스레드를 블로킹하지 않는 실제로는 비동기적인 코드를 동기적인 코드처럼 작성할 수 있다.
 * 또한 코틀린의 코루틴은 컴파일에 의해 구현되었으므로 가상머신이나 OS를 사용하지 않는다.
 * 코틀린은 1.1에 추가된 코루틴을 사용하는 방법은 buildSequence와 buildIterator가 있는데 이번 장에서는
 * **buildSequence를 사용한 방법**을 알아본다.
 *
 * 아래의 코드를 보자. buildSequence 함수로 코드블록 내에 무한루프를 만들었다. 또한 무한루프를 돌며
 * num을 yield 리턴하고, num의 값을 2씩 늘려주었다. 그리고 main 함수에서 이를 호출하였는데 take를 사용하면 쉽게 말해
 * 5번 리턴할 때까지 돌린다는 뜻이다. 즉 5번 리턴한 값을 모았으므로 값은 0,2,4,6,8이 출력된다.
 *
 * 만약 take에 2를 넣었다면 0,2만 출력될 것이다.
 */
fun main() {
    // 예제에서는 buildSequence를 사용했는데 이는 Deprecated 되었다!
    val seq = sequence<Any> {
        var num = 0

        while (true) {
            yield(num)
            num += 2
        }
    }

    seq.take(5).forEach {
        println(it)
    }
}
