package chap10

/**
 * 그렇다면 주 생성자를 사용하여 클래스를 선언해보자. 아래의 코드에서는 주 생성자를 사용하는 클래스를 보여준다.
 * **주 생성자는 클래스 이름 옆에 바로 사용한다.** 자바처럼 별도로 선언하지 않음으로써 어느 정도의 코드량을 줄일 수 있는 것이다.
 * 이전의 코드에서는 기본 생성자를 생략했다고 했는데 클래스를 선언할 때 클래스 이름 옆에 "()"를 생략한 것이다.
 *
 * 그리고 다른 점은 init이라는 키워드로 코드블럭을 정의한다. 코틀린에서 주 생성자는 코드블록이 없기 때문에 init 키워드로
 * 주 생성자에 대한 행위를 정의할 수 있다. init 키워드로 정의된 코드블럭은 자바에서 생성자와 같이 객체가 생성될 때 한 번 실행된다.
 *
 * 자바에서는 인자가 없는 생성자를 만들지 않고, 다른 생성자를 만든다면 인자가 없는 생성자로 객체를 생성할 수 없다. 이와 마찬가지로 아래의 코드의
 * Backpack 클래스는 인자를 넘기지 않으면 객체를 생성할 수 없다. 그래서 여러 생성자를 사용하려면 보조생성자를 사용해야한다.
 *
 * init 키워드로 생성자를 정의하는 예제는 아래의 코드와 같다. 이 코드의 출력결과는 "브랜드는 Incase이고 색상은 Red입니다" 이다.
 */
fun main() {
    val myBackpack = Backpack("Incase", "Red")
}

class Backpack(brand: String, color: String) {
    init {
        println("브랜드는 $brand 이고 색상은 $color 입니다.")
    }
}

