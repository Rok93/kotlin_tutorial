package chap10

/**
 * 코틀린에서 클래스의 개념은 자바와 동일하다.
 * 자바에서 모든 클래스가 Object 클래스를 상속받듣이 코틀린은 모든 클래스가 Any 클래스를 상속받는다.
 * 코틀린에서 객체생성도 자바와 비슷하다. 다만 간결한 문법을 위해 new 키워드가 빠졌다. 간단하게 보여주면 아래와 같다.
 * [ val exam = String() ]
 * 위와 같이 간단한 String 객체를 생성할 수 있다. 사실 자바와 비교하면 new 키워드가 빠진 것 빼고는 생성자에 값을 전달하는 것까지 똑같다.
 * 하지만 클래스를 선언하는 문법은 확연하게 다르다.
 * 생성자를 생략이 가능한 것은 똑같지만 코틀린은 "주생성자"와 "보조 생성자"로 두 개로 나뉘어진다.
 * 여기선 이 생성자들에 대해 알아보도록 하겠다.
 *
 *
 * [주 생성자]
 * 먼저 생성자를 따로 선언하지 않는 클래스를 계산 클래스로 예로 들어 만들어본다.
 * 아래의 코드를 보자. 간단하게 Calc의 객체를 생성했고, 그 메서드인 sum을 호출했다.
 * 그리하여 이를 더해서 리턴된 결과값인 6을 출력하게 된다.
 */

fun main() {
    val calc = Calc()
    println(calc.sum(1, 5))
}

class Calc {
    fun sum(a: Int, b: Int): Int {
        return a + b
    }
}

// 자바에서 기본 생성자를 생략해도 되듯이, 해당 코드에서도 기본 생성자를 생략한 것이다. 기본생성자는 주생성자에 속한다.
