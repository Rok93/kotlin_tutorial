package chap02

fun main(args: Array<String>) {
    /**
     * 코틀린의 자료형은 기본적으로 래퍼런스 타입이라고 했었다. 래퍼런스 타입이면 Null값을 가질 수도 있을 것이다.
     * 하지만 코틀린에서는 자료형이 래퍼런스 타입이라도 기본적으로 Null값을 가질 수 없다. Null값을 갖게 하려면 자료형 이름 뒤에 '?'를
     * 붙여줘야한다. '?'의 의미는 이 자료형에는 Null값이 들어있을지도 모른다라는 명시이다.
     *
     * 즉 ?가 붙지 않은 자료형은 Null 값이 절대 들어있지 않다는 것을 보장한다.
     */

//    val str1: String = null // 컴파일 에러가 발생한다.
    val str2: String? = null // 컴파일 에러가 발생하지 않는다.

    // 또한 코틀린에서는 Null값인 경우의 처리를 물음표를 통해 매우 간편하게 할 수 있다.
    /**
     * 아래의 코드는 디렉토리에 있는 파일의 목록을 가져와 파일의 개수를 출력하는 코드이다.
     * 존재하지 않는 디렉토이에서 파일의 목록을 요청하면 Null이 리턴된다. 그래서 files 변수는 잠재적으로 Null값을 가질 수 있는 변수이다.
     * 그래서 이러한 변수의 속성을 호출할 때에는 ?를 통해 Null 검사를 한다.
     * **변수명 뒤에 물음표를 달았을 경우** 이 변수가 Null인지 검사하고, Null이라면 실행하지 않는다.
     */

    // 존재하지 않는 디렉토리의 파일 목록을 가져온다.
    var files = java.io.File("/Applications").list()
    println(files?.size) // 파일의 개수가 출력된다.

    // 없는 디렉토리의 파일목록을 가져온다.
    files = java.io.File("c:\\nothing").list() // null
    println(files?.size)
}
